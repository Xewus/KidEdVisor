"""000

Revision ID: 236616f8ecd1
Revises:
Create Date: 2023-04-07 21:07:35.219511

"""
import sqlalchemy as sa
from alembic import op

from src.core.enums import TableNames, UserType

# revision identifiers, used by Alembic.
revision = "236616f8ecd1"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "auth",
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("user_type", sa.Integer(), nullable=False),
        sa.Column("password", sa.String(length=128), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(length=254), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_auth_email"), "auth", ["email"], unique=True)
    op.create_table(
        "owner",
        sa.Column("auth_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=128), nullable=True),
        sa.Column("surname", sa.String(length=128), nullable=True),
        sa.Column("patronic", sa.String(length=128), nullable=True),
        sa.Column("born", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "parent",
        sa.Column("auth_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=128), nullable=True),
        sa.Column("surname", sa.String(length=128), nullable=True),
        sa.Column("patronic", sa.String(length=128), nullable=True),
        sa.Column("born", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "institution",
        sa.Column("owner_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["owner.id"], ondelete="SET DEFAULT"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "teacher",
        sa.Column("owner_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["owner.id"], ondelete="SET DEFAULT"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###
    # trigger for postgresql
    op.execute(
        f"""
        CREATE OR REPLACE FUNCTION insert_other_table()
        RETURNS TRIGGER AS $$
        BEGIN
            IF NEW.user_type = {UserType.PARENT} THEN
                INSERT INTO {TableNames.PARENT} (auth_id) VALUES (NEW.id);
            ELSEIF NEW.user_type = {UserType.OWNER} THEN
                INSERT INTO {TableNames.OWNER} (auth_id) VALUES (NEW.id);
            END IF;
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
        """  # nosec B608
    )
    op.execute(
        f"""
        CREATE TRIGGER {TableNames.AUTH}_insert_trigger
        AFTER INSERT ON {TableNames.AUTH}
        FOR EACH ROW
        EXECUTE FUNCTION insert_other_table();
        """
    )


def downgrade() -> None:
    op.execute(
        f"DROP TRIGGER {TableNames.AUTH}_insert_trigger ON {TableNames.AUTH};"
    )
    op.execute("DROP FUNCTION insert_other_table();")

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("teacher")
    op.drop_table("institution")
    op.drop_table("parent")
    op.drop_table("owner")
    op.drop_index(op.f("ix_auth_email"), table_name="auth")
    op.drop_table("auth")
    # ### end Alembic commands ###
