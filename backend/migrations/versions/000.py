"""000

Revision ID: cdc20c22af6a
Revises:
Create Date: 2023-04-16 18:07:44.587541

"""
import sqlalchemy as sa
from alembic import op
from src.core.enums import TableNames, UserType

# revision identifiers, used by Alembic.
revision = "cdc20c22af6a"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "auth",
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("user_type", sa.Integer(), nullable=False),
        sa.Column("password", sa.String(length=128), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(length=254), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_auth_email"), "auth", ["email"], unique=True)
    op.create_table(
        "category",
        sa.Column("name", sa.String(length=32), nullable=False),
        sa.Column("description", sa.String(length=64), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_category_name"), "category", ["name"], unique=True
    )
    op.create_table(
        "country",
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_country_name"), "country", ["name"], unique=True)
    op.create_table(
        "owner",
        sa.Column("auth_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=128), nullable=True),
        sa.Column("surname", sa.String(length=128), nullable=True),
        sa.Column("patronic", sa.String(length=128), nullable=True),
        sa.Column("born", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["auth_id"], ["auth.id"], ondelete="SET DEFAULT"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "parent",
        sa.Column("auth_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=128), nullable=True),
        sa.Column("surname", sa.String(length=128), nullable=True),
        sa.Column("patronic", sa.String(length=128), nullable=True),
        sa.Column("born", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["auth_id"], ["auth.id"], ondelete="SET DEFAULT"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "region",
        sa.Column("country_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.ForeignKeyConstraint(
            ["country_id"],
            ["country.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "city",
        sa.Column("country_id", sa.Integer(), nullable=True),
        sa.Column("region_id", sa.Integer(), nullable=True),
        sa.Column("district_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.ForeignKeyConstraint(
            ["country_id"],
            ["country.id"],
        ),
        sa.ForeignKeyConstraint(
            ["district_id"],
            ["region.id"],
        ),
        sa.ForeignKeyConstraint(
            ["region_id"],
            ["region.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "district",
        sa.Column("region_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.ForeignKeyConstraint(
            ["region_id"],
            ["region.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "teacher",
        sa.Column("owner_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["owner.id"], ondelete="SET DEFAULT"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "street",
        sa.Column("city_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.ForeignKeyConstraint(
            ["city_id"],
            ["city.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "address",
        sa.Column("city_id", sa.Integer(), nullable=True),
        sa.Column("street_id", sa.Integer(), nullable=True),
        sa.Column("building", sa.String(length=16), nullable=True),
        sa.Column("adds", sa.String(length=16), nullable=True),
        sa.Column("office", sa.String(length=16), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["city_id"],
            ["city.id"],
        ),
        sa.ForeignKeyConstraint(
            ["street_id"],
            ["street.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "institution",
        sa.Column("name", sa.String(length=128), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("site", sa.String(length=256), nullable=True),
        sa.Column("address_id", sa.Integer(), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["address_id"],
            ["address.id"],
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["owner.id"], ondelete="SET DEFAULT"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "owner_address",
        sa.Column("owner_id", sa.Integer(), nullable=True),
        sa.Column("address_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["address_id"],
            ["address.id"],
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["owner.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "phone",
        sa.Column("address_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("number", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["address_id"], ["address.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_phone_address_id"), "phone", ["address_id"], unique=False
    )
    op.create_index(op.f("ix_phone_number"), "phone", ["number"], unique=True)
    # ### end Alembic commands ###
    # trigger for postgresql
    op.execute(
        f"""
        CREATE OR REPLACE FUNCTION insert_other_table()
        RETURNS TRIGGER AS $$
        BEGIN
            IF NEW.user_type = {UserType.PARENT} THEN
                INSERT INTO {TableNames.PARENT} (auth_id) VALUES (NEW.id);
            ELSEIF NEW.user_type = {UserType.OWNER} THEN
                INSERT INTO {TableNames.OWNER} (auth_id) VALUES (NEW.id);
            END IF;
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
        """  # nosec B608
    )
    op.execute(
        f"""
        CREATE TRIGGER {TableNames.AUTH}_insert_trigger
        AFTER INSERT ON {TableNames.AUTH}
        FOR EACH ROW
        EXECUTE FUNCTION insert_other_table();
        """
    )


def downgrade() -> None:
    op.execute(
        f"DROP TRIGGER {TableNames.AUTH}_insert_trigger ON {TableNames.AUTH};"
    )
    op.execute("DROP FUNCTION insert_other_table();")

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_phone_number"), table_name="phone")
    op.drop_index(op.f("ix_phone_address_id"), table_name="phone")
    op.drop_table("phone")
    op.drop_table("owner_address")
    op.drop_table("institution")
    op.drop_table("address")
    op.drop_table("street")
    op.drop_table("teacher")
    op.drop_table("district")
    op.drop_table("city")
    op.drop_table("region")
    op.drop_table("parent")
    op.drop_table("owner")
    op.drop_index(op.f("ix_country_name"), table_name="country")
    op.drop_table("country")
    op.drop_index(op.f("ix_category_name"), table_name="category")
    op.drop_table("category")
    op.drop_index(op.f("ix_auth_email"), table_name="auth")
    op.drop_table("auth")
    # ### end Alembic commands ###
